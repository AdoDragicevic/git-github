GitHub
  - hosting platform for git repositories
  - helps people to share and collaborate on git repos
  - cloud (store your code)
  - opensource projects
  - portfolio, networking, exposure
  - helps stay up to date (e.g. with React updates)


git clone <URL> // get copy of repo; make sure you are not inside a repo!


SSH Key
  - configure to be able to push to github, otherwise you always have to give your email and password


Connecting to github
  - options:
    a) existing repo locally
      1. create repo on GitHub
      2. set a remote (URL) locally
        - git remote // show list of remotes for this repo
        - git remote -v // more info
        - git remote add <name> <URL> // create remote (name & url)
        // origin is a conventional git remote name
        - git remote rename <oldName> <newName> // rename
        - git remote remove <name> // delete remote 
      3. Push to Github
        - git push <remoteName> <branch> // remoteName: e.g. origin, branch: branch we are pushing from our repo, e.g. main
        // e.g. git push origin master
        - git push origin master // push local master to origin master (if there is no origin master, it creates it)
        - git push origin master:experiment // push local master to experiment branch on github
        - git push -u <origin> <branch> // -u stands for upstream, next time we can just type 'git push' and it
                                           pushes <branch> to <origin>, we "lock" them together
        - git push --set-uprstream <origin> <dogs> // same as -u above
    b) no repo
      1. create repo on Github
      2. clone it
        - this automatically configures the remote (origin URL)
      3. work locally
      4. push to Github


Remote Trancking Branches (reference)
  - the last know spot we know of for origin/branch; shows where at the last time you commuicated with the remote repo the 
    x branch was pointing
  - they follow this pattern: <remote>/<branch>
    - e.g.: upstream/logoDesign references the state of logoRedesign on the remote named upstream
  - git branch -r // view remote branches our local repo knows about
  - when you clone repo and add & commit changes, and type 'git status' you will get a msg: 
    'your branch is ahead of origin/main by 1 commit (use "git push" to publish your changes)'
  - remote tracking branches do not know if the remote repo was updated after you last cloned/pulled/fetched
  - imagine this, the head of remote repo is not the head of your repo when you make changes, but you have the reference to your
    head and origin head
  - remote reference doesn't move!
  - git checkout origin/master // see the state when you last downloaded remote repo
  - git checkout origin/master // detached head state, just like checking out a previous commit


Working with remote branches
  - when you clone a repo with multiple branches, you ONLY have the default branch
  - git branch -r // shows all branches from remote repo
  - git switch <remote-branch-name> // creates local branch based on remote branch with same name
  - git checkout --track origin/puppies // equivalent for line above
  - git push <origin> <branchName> // pushes changes to specified remote branch
  - if you just want to see the branch, use git checkout origin/branchName


Fetching & Pulling
  - git process of saving changes:
    workspace -> git add -> staging area -> git commit -> local repo -> git push -> remote repo
  - this commands get the changes from remote repo
  - git fetct and git pull go the other dirrection
  
  - fetch: download changes, don't integrate them (don't change master/otherBranch); you can see
           changes in origin/branch, but it does not affect your branch; to see changes with
           'git checkout origin/branch'; it only updates remote trachink branches
  - git fetch <remote> // remote repo -> local repo; if not specified, <remote> defaults to origin; gets all changes
  - git fetch <remote> <branch> // fetch just one branch changes
  - if new branch was added to remote repo, you can use git fetch origin to add that branch to remote
    tracking branches (git branch -r)
  - after fetch use 'git status'
  
  - git pull <remote> <branch> // remote repo -> worspace; download and integrate changes to local repo
  - git pull // remote defaults to origin, branch defaults to originBranch connected to branch we are on
  - it matters where we run git pull from! Changes are merged into the branch we are on.
  - don't use 'git pull' if you have uncommited changes!
  - possible merge conflicts
  - git pull = git fetch (update remote tracking change) + git merge (update current branch with changes on remote tracking branch)
  

  Odds & Outs
    - only owner has access to settings
    - public repo // accessible & clonable by anyone
    - private repo // only visible and accessible to owner and people who granted access
      - in corporations a private repo could be visible to everyone in the org
      - change public vs private in settings -> danger zone
    - collaborators // settings -> manage access
    - github gists // code snippets; simplified repos; read: Ä‘ists; https://gist.github.com/AdoDragicevic
    - gh pages // host static websites, only client side code (html, css, js); https://pages.github.com/
                  steps on github:
                    - create repo
                    - settings -> github pages -> source -> choose branch (does not have to be main)
                    - github looks for index.html


Collaboration workflows:  
  1. centralized
    - everyone works on main; worst approach (conflicts, pushing unfinished code to main...)
  2. feature
    - don't work on master, work only on feature branch
    - some use these naming conventions: feat/navbar, bug/navbar, fix/navbar, refactor/navbar
    - before creating branch and mergin, run 'git pull' to ensure you're up to date!
    - options for merging feature branches to main:
        1. just do it, worst option
        2. teemates discuss if your branch should be merged, code review
        3. pull requests (PR)
            - gitHub feature, not part of git
            - alert team members their approval is needed
            - in a lot of companies the main branch is protected, you can't make a merge before PR;
              branch protection rules // settings -> branches
            - you make it on gitHub after pushing your branch
            - it allows you and teammates to communicate through comments
            - changes can be made to the branch even after pull request
            - conflicts can be solved in the browser, or click 'view command line instructions' to  
  3. Fork
    - instead of one github repo, each dev has his own github repo
    - devs push to their own github repos, before making pull requests
    - common with large open sorce projects
    - no premission needed at first, you copy react repo, make changes and only then make PR
    - forking is a feature of gitHub, not part of git
    - forking = making a copy of github repo on our gitHub account
    - steps: 
      - fork // open someones hitHub repo, click fork btn (there is no git fork command!)
      - clone // 'git clone' the fork (copy on our github) to our machine; origin points to our copy remote repo, not original github repo
      - add upstream remote // add a remote pointing to the original remote repo (so we can tranck changes there), usually named upstream
                               We never push to that repo! We pull (or fetch) changes from it!
      - change // all changes are made locally and pushed to the fork (our remote copy)
      - PR // make pull request from fork to the original remote repo; over of original remote repo decides on the PR;
              owner of the original repo sees them 'under pull requests'
    - the whole idea is that people, with no access rights to remote repo, still can make contributions (e.g. react)