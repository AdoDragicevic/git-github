Basic commands:
    - init
    - status
    - add
    - commit
    - stash
    - log
    - branch
    - switch
    - checkout
    - merge
    - rebase
    - revert
    - reset
    - restore
    - diff

git init // create new repo; creates .git file

.gitignore // secret.js node_modules/ *.txt

git config --global user.name "Ado Dragicevic" // ommit string to see current name
git config --global user.email "adodragicevic@gmail.com"

git status // check status

git add <file-name> // add to staging area
git add <file-name> <more-file-names> // add to staging area
git add . // add all ustracked files to staging area

git commit // add checkpoint
git commit -m // "add checkpoint and inline message"
git commit -a -m " // add all untracked files to staging area & commit with message
git commit -am " // add all untracked files to staging area & commit with message
git commit --ament // edit previous commit

git branch // see branches
git branch <branch-name> // create branch
git branch -d <branch-name> // delete branch; you must not be on the branch you are trying to delete
git branch -D <branch-name> // delete branch even if changes are not merged anywhere
git branch -M <branch-name> // rename HEAD; you must be on the branch you are trying to rename

git switch <branch-name> // switch to branch
git switch -c <branch-name> // create branch and switch to in
git switch - // switch to branch we were on before

git chekout <branch-name> // switch to branch
git checkout <tag-name> // switch to tag (a particular commit)

git log // shows commits
git log --oneline // shows commits overview

// Merging
// we merge branches, not specific commits
// we always merge based on the current HEAD branch (to the HEAD branch)

git merge <branch-name> // merge specified branch to current HEAD

// fast forward merge (when there is no additional work on master)
// merge commit (comit created when we merge to master that has been changed)
// merge conflict ()
    - git tells you there is a conflict
    - git tells you in which files
    - you open the file, the conflicts are highlighted
    - edit file to remove conflicts
    - remove git markers ('<<<<<<<<', '========', '>>>>>>>>>')
    - add & commit changes

git diff // informative command (like status or log)
git diff // show unstaged changes
git diff HEAD // show unstaged and staged changes (since last commit)
git diff --staged // show staged changes
git diff --cached // identical as diff --staged
git diff <file-name> // show differences only for specified file(s)
git diff <branch>..<branch2> // compare differences on branches
git diff <branch> <branch2> // identical as line above
git diff <commit-hash>..<commit-hash-2> // show differences between 2 branches
git diff <commit-hash> <commit-hash-2> // identical as line above
git diff <tag-name> <tag-name> // compare 2 tags
git diff <tag-name>..<tag-name> // identical as line above

git stash 
 - before we switch to another branch we should eather commit or stash changes
 - othervise the changes will go with us (if there are no conflicts), or switch will not work
git stash // save changes that are not commited
git stash save // identical as line above
git stash pop // retrieve the last stash to working dir 
git stash apply // retrieve the last stash to working dir, without removing it from the stas (useful
                   if we want to apply stashed changes to multiple places)
git stash list // show all stashes
git stash apply <stash-id> // apply specified stash
git stash drop <stash-id> // remove specified stash
git stash clear // delete all stashes

Going back in time
git checkout <commit-hash> // gives us 'detached HEAD'; HEAD usually points to a branch reference, and
                              branch reference points to its last commit; 'detached HEAD' points to commit
git checkout <tag-name> // puts us in 'detached HEAD'
 - detached HEAD options:
    - stay in detached HEAD in 'view mode',
    - go back to HEAD (git switch master),
    - chreate new branch and switch to it (you can now make and save changes, since HEAD is no longer detached)

git checkout HEAD~1 // revisit previous commit (number indicates how far back)

Restore // deleted changes that are not commited are lost and can not be retrieved!
git checkout HEAD <file> // discard changes to a file (revert it to how it looked on last commit)
git checkout -- <file> // identical as line above
git restore <file> // discard changes to file; identical as line above
git restore --source HEAD~1 <file> // now git resore does not reference the HEAD; restore specified file
                                      relative to defined commit
git restore --source <commit-hash> <file> // identical as line above

git restore --staged <file> // unstage file; changes made to the file are not deleted

Reset
git reset <commit-hash> // reset repository to specified commit; deletes commits after it, but keeps the changes;
                           also called basic reset; now we can commit the changes on new branch or make 1 commit
                           instead of 4
git reset --hard <commit-hash> // same as above but it also deletes all changes; know as hard reset
git reset --hard HEAD~1 // same as above; instead of commit-hash we specify the num of commits to go back

Revert
git revert <commit-hash>
 - both reset and revert 'undo' changes, but they do it in a different way
 - reset moves branch pointer backwards, eliminating commits
 - revert creates a new commit that does not include changes from commits after the specified commit-hash,
   but the new commit is added to the end of the branch and previous commits (including reverted) are not lost
 - can resut in conflicts

Reset or Revert?
 - use revert if you want to reverse commits that are shared (other people have them on their machines)
 - use reset if you want to revert commit that you haven't shared with others and no one will ever know

Rebasing
 - Golden rule: never rebase commits that have already been shared (i.e. on github)
 - two ways of using:
    1. alternative to merge

        git switch feature
        git rebase master

         - this moves entire feature branch os that is BEGINS at the tip of the master branch
         - original commits on master are unchanged
         - feature branch history is changed
         - cleans up the feature commits (compared to merging master to feature) and allows us to be in sinc with master
         - can resolve in conflicts:
            - in case of conflicts, rebase is paused
            - floow instructions in terminal
            - solve conflicts
            - git add <file-with-conflict>
            - git rebase --continued (do NOT commit!)
            - alternativelly cancel rebase with git rebase --abort

    2. cleanup tool (rewriting history)
        
        - called interactive rebasing
        - a step a lot of devs use before sharing their branch / work
        - this is 'nice to have' category
        - you are not rebasing on a branch, you are always rebasing on current HEAD history

        git rebase -i HEAD~2

        - -i opens interactive mode
        - HEAD~4 shows how many commits back you want to go
        - the in the interactive mode we get a list of commits with 'pick' keyword in front of them
        - changing 'pick' determines what will happen to them
        - interactive mode has a cheatsheet of all the commands
        - most important commands:
            - pick, reword, edit, fixup, drop
            - after adding command(s) you close the window and editor will open a new interactive mode
              for each commit that you added a command for
            - you do not edit the commits in the first interactive window
            - every commit that is changed and all commits after it gets a new hash

Git tags
 - often used to mark different product releases (v1.2.0)
 - we tag a particular commit, this does not change it
 - tag is a label for a commit
 - think of it like a sticky note on a commit
 - two types:
    - lightweight tags (store label) and annotated tags (store extra meta data)

 git tag // show list of all tags in current repo
 git tag -l "*beta*" // show all tags that include 'beta'
 git tag -l "v17*" // show all tags that start with 'v17'
 git tag -l "beta" // look for tag called exactly 'beta'
 git tag <tag-name> // creates tag at HEAD; creates lightweight tag
 git tag -a <tag-name> // creates tag at HEAD; creates annotated tag
 git tag <tag-name> <commit-hash> // tag selected commit
 git tag -f <tag-name> <new-commit-hash> // if this tagname was taken it will now point to a new commit;
                                            we force the change (tag no longer refers to old commit)
 git tag -d <tag-name> // delete tag
 git show <tag-name> // shows tag info (message, meta data, commit it referes to)

 git push --tags // by default when we push changes to remote server, tags are not included; --tags flag ensures tags are pushed as well
 git push <remote-name> <tag-name> // push singe tag to remote server

 git checkout <tag-name> // puts us in 'detached HEAD'
 git diff <tag-name> <tag-name>


Git clone
 git clone <URL> // get copy of repo; make sure you are not inside a repo!


Semantic versioning
 - 2.2.1 or v2.2.1
 - numbers represent: major release, minor release, patch release
 - patch: no new fetures, just bug fixes, no change to how app is used
 - minor: new features that are fully backwards compatible, usually optional for users;
          pathc number resets to 0
 - major: breaking changes; minor number resets to 0